/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as CategoryIdRouteImport } from './routes/$categoryId'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CategoryIdIndexRouteImport } from './routes/$categoryId.index'
import { Route as CategoryIdNewRouteImport } from './routes/$categoryId.new'
import { Route as CategoryIdNoteIdRouteImport } from './routes/$categoryId.$noteId'

const CategoryIdRoute = CategoryIdRouteImport.update({
  id: '/$categoryId',
  path: '/$categoryId',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoryIdIndexRoute = CategoryIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CategoryIdRoute,
} as any)
const CategoryIdNewRoute = CategoryIdNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => CategoryIdRoute,
} as any)
const CategoryIdNoteIdRoute = CategoryIdNoteIdRouteImport.update({
  id: '/$noteId',
  path: '/$noteId',
  getParentRoute: () => CategoryIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$categoryId': typeof CategoryIdRouteWithChildren
  '/$categoryId/$noteId': typeof CategoryIdNoteIdRoute
  '/$categoryId/new': typeof CategoryIdNewRoute
  '/$categoryId/': typeof CategoryIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$categoryId/$noteId': typeof CategoryIdNoteIdRoute
  '/$categoryId/new': typeof CategoryIdNewRoute
  '/$categoryId': typeof CategoryIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$categoryId': typeof CategoryIdRouteWithChildren
  '/$categoryId/$noteId': typeof CategoryIdNoteIdRoute
  '/$categoryId/new': typeof CategoryIdNewRoute
  '/$categoryId/': typeof CategoryIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$categoryId'
    | '/$categoryId/$noteId'
    | '/$categoryId/new'
    | '/$categoryId/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$categoryId/$noteId' | '/$categoryId/new' | '/$categoryId'
  id:
    | '__root__'
    | '/'
    | '/$categoryId'
    | '/$categoryId/$noteId'
    | '/$categoryId/new'
    | '/$categoryId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CategoryIdRoute: typeof CategoryIdRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$categoryId': {
      id: '/$categoryId'
      path: '/$categoryId'
      fullPath: '/$categoryId'
      preLoaderRoute: typeof CategoryIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$categoryId/': {
      id: '/$categoryId/'
      path: '/'
      fullPath: '/$categoryId/'
      preLoaderRoute: typeof CategoryIdIndexRouteImport
      parentRoute: typeof CategoryIdRoute
    }
    '/$categoryId/new': {
      id: '/$categoryId/new'
      path: '/new'
      fullPath: '/$categoryId/new'
      preLoaderRoute: typeof CategoryIdNewRouteImport
      parentRoute: typeof CategoryIdRoute
    }
    '/$categoryId/$noteId': {
      id: '/$categoryId/$noteId'
      path: '/$noteId'
      fullPath: '/$categoryId/$noteId'
      preLoaderRoute: typeof CategoryIdNoteIdRouteImport
      parentRoute: typeof CategoryIdRoute
    }
  }
}

interface CategoryIdRouteChildren {
  CategoryIdNoteIdRoute: typeof CategoryIdNoteIdRoute
  CategoryIdNewRoute: typeof CategoryIdNewRoute
  CategoryIdIndexRoute: typeof CategoryIdIndexRoute
}

const CategoryIdRouteChildren: CategoryIdRouteChildren = {
  CategoryIdNoteIdRoute: CategoryIdNoteIdRoute,
  CategoryIdNewRoute: CategoryIdNewRoute,
  CategoryIdIndexRoute: CategoryIdIndexRoute,
}

const CategoryIdRouteWithChildren = CategoryIdRoute._addFileChildren(
  CategoryIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CategoryIdRoute: CategoryIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
